{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/MultiplicationTable/MultiplicationTable.svelte",
    "../src/Header.svelte",
    "../src/GenericComponents/NumericInput.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Header from \"./Header.svelte\";\n  import MultiplicationTable from \"./MultiplicationTable/MultiplicationTable.svelte\";\n</script>\n\n<style>\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n</style>\n\n<h1>\n  <Header />\n  <MultiplicationTable />\n</h1>\n",
    "<script>\n  import Quiz from \"../Quiz.ts\";\n  import NumericInput from \"../GenericComponents/NumericInput.svelte\";\n  import MultiplicationTable from \"../MultiplicationTable.ts\";\n\n  let correctAnswers = [];\n  let incorrectAnswers = [];\n\n  const submitHandlers = {\n    onSubmitCorrectAnswer: id => {\n      correctAnswers = [...correctAnswers, id];\n    },\n    onSubmitIncorrectAnswer: id => {\n      incorrectAnswers = [incorrectAnswers, id];\n    }\n  };\n\n  const multiplicationTableQuiz = new Quiz(\n    new MultiplicationTable(10).getQAPair(),\n    \"mt\",\n    submitHandlers\n  );\n\n  const quizQuestions = multiplicationTableQuiz.getQuestions();\n\n  function onSubmitAnswer(answer, index) {\n    multiplicationTableQuiz.submitAnswer(answer, index);\n  }\n\n  let focusedInputIndex = 13;\n\n  function handleNavigate(key) {\n    switch (key) {\n      case \"ArrowUp\":\n        focusedInputIndex = focusedInputIndex - 10;\n        break;\n      case \"ArrowLeft\":\n        focusedInputIndex = focusedInputIndex - 1;\n        break;\n      case \"ArrowRight\":\n        focusedInputIndex = focusedInputIndex + 1;\n        break;\n      case \"ArrowDown\":\n        focusedInputIndex = focusedInputIndex + 10;\n        break;\n    }\n  }\n\n  function parseIndex(string) {\n    const numberPattern = /\\d+/g;\n    return parseInt(string.match(numberPattern)[0]);\n  }\n</script>\n\n<style>\n  .table-wrapper {\n    padding: 2rem;\n    display: grid;\n    grid-template-rows: repeat(10, 4rem);\n    grid-template-columns: repeat(10, 4rem);\n    column-gap: 5px;\n    row-gap: 5px;\n    border: 3px solid blue;\n  }\n  .cell {\n    border: 2px solid black;\n    width: 100%;\n    height: 100%;\n  }\n  .visible {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .correct {\n    outline: 5px solid green;\n    outline-offset: -7px;\n  }\n\n  .incorrect {\n    outline: 5px solid red;\n    outline-offset: -7px;\n  }\n</style>\n\n<div class=\"table-wrapper\">\n  {#each quizQuestions as question (question.index)}\n    <div\n      class={'cell'}\n      class:correct={correctAnswers.includes(question.index)}\n      class:incorrect={incorrectAnswers.includes(question.index)}>\n      {#if parseIndex(question.index) < 10 || parseIndex(question.index) % 10 == 0}\n        <div class={'visible'}>{question.correctAnswers[0]}</div>\n      {:else}\n        <NumericInput\n          isFocused={parseIndex(question.index) == focusedInputIndex}\n          onSubmit={answer => onSubmitAnswer(answer, question.index)}\n          onNavigate={handleNavigate} />\n      {/if}\n\n    </div>\n  {/each}\n</div>\n",
    "<script>\n  let name = \"world\";\n</script>\n\n<style>\n  p {\n    color: purple;\n    font-family: \"Comic Sans MS\";\n    font-size: 2em;\n  }\n</style>\n\n<h1>\n  <p>CountFast!</p>\n</h1>\n",
    "<script>\n  export let onSubmit;\n  export let onNavigate;\n  export let isFocused;\n\n  let inputNode;\n  let inputValue = \"\";\n  let isInvalid = false;\n\n  $: isFocused && inputNode && inputNode.focus();\n  $: isInvalid = inputValue && isNaN(parseInt(inputValue));\n\n  function handleSubmit(e) {\n    onSubmit(e.target.value);\n  }\n\n  function keydownHandler(e) {\n    onNavigate(e.key);\n  }\n\n  function handleInput() {\n    isInvalid && console.log(\"It's invalid!!!\");\n  }\n</script>\n\n<style>\n  input {\n    border: none;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    margin: 0;\n    color: blue;\n  }\n  .invalid {\n    background-color: pink;\n  }\n</style>\n\n<input\n  type=\"text\"\n  maxlength=\"2\"\n  class:invalid={isInvalid}\n  bind:this={inputNode}\n  bind:value={inputValue}\n  on:input={handleInput}\n  on:change={handleSubmit}\n  on:keydown={keydownHandler} />\n"
  ],
  "names": [],
  "mappings": "AAME,cAAE,CAAC,AACD,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC;AC6CD,cAAc,cAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CACpC,qBAAqB,CAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CACvC,UAAU,CAAE,GAAG,CACf,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACxB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,OAAO,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACxB,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,GAAG,CAAC,KAAK,CAAC,GAAG,CACtB,cAAc,CAAE,IAAI,AACtB,CAAC;AChFD,CAAC,eAAC,CAAC,AACD,KAAK,CAAE,MAAM,CACb,WAAW,CAAE,eAAe,CAC5B,SAAS,CAAE,GAAG,AAChB,CAAC;ACiBD,KAAK,eAAC,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,AACb,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,AACxB,CAAC"
}