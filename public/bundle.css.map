{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Header.svelte",
    "../src/MultiplicationTable/MultiplicationTable.svelte",
    "../src/GenericComponents/QuizQuestion.svelte"
  ],
  "sourcesContent": [
    "<script>\n  let name = \"world\";\n</script>\n\n<style>\n  p {\n    color: purple;\n    font-family: \"Comic Sans MS\";\n    font-size: 2em;\n  }\n</style>\n\n<h1>\n  <p>CountFast!</p>\n</h1>\n",
    "<script>\n  import Quiz from \"../Quiz.ts\";\n  import QuizQuestion from \"../GenericComponents/QuizQuestion.svelte\";\n  import MultiplicationTable from \"../MultiplicationTable.ts\";\n\n  let correctAnswers = [];\n  let incorrectAnswers = [];\n\n  const submitHandlers = {\n    onSubmitCorrectAnswer: id => {\n      correctAnswers = [...correctAnswers, id];\n    },\n    onSubmitIncorrectAnswer: id => {\n      incorrectAnswers = [incorrectAnswers, id];\n    }\n  };\n\n  const multiplicationTableQuiz = new Quiz(\n    new MultiplicationTable(10).formatForQuiz(),\n    \"mt\",\n    submitHandlers\n  );\n\n  const quizQuestions = multiplicationTableQuiz.getQuestions();\n\n  function onSubmitAnswer(answer, index) {\n    multiplicationTableQuiz.submitAnswer(answer, index);\n  }\n\n  function parseIndex(string) {\n    const numberPattern = /\\d+/g;\n    return string.match(numberPattern)[0];\n  }\n</script>\n\n<style>\n  .table-wrapper {\n    padding: 2rem;\n    display: grid;\n    grid-template-rows: repeat(10, 4rem);\n    grid-template-columns: repeat(10, 4rem);\n    column-gap: 5px;\n    row-gap: 5px;\n    border: 3px solid blue;\n  }\n  .cell {\n    border: 2px solid black;\n    width: 100%;\n    height: 100%;\n  }\n  .visible {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .correct {\n    border: 3px solid green;\n  }\n\n  .incorrect {\n    border: 3px solid red;\n  }\n</style>\n\n<div class=\"table-wrapper\">\n  {#each quizQuestions as question (question.index)}\n    <div\n      class={'cell'}\n      class:correct={correctAnswers.includes(question.index)}\n      class:incorrect={incorrectAnswers.includes(question.index)}>\n      {#if parseIndex(question.index) < 10 || parseIndex(question.index) % 10 == 0}\n        <div class={'visible'}>{question.answers[0]}</div>\n      {:else}\n        <div class={'invalid'}>\n          <QuizQuestion\n            submitAnswerHandler={answer => onSubmitAnswer(answer, question.index)} />\n        </div>\n      {/if}\n\n    </div>\n  {/each}\n</div>\n",
    "<script>\n  export let submitAnswerHandler;\n  let inputValue = \"\";\n\n  function handleInput(e) {\n    inputValue = e.target.value;\n    console.log(\"validating: \", inputValue);\n  }\n\n  function handleSubmit(e) {\n    submitAnswerHandler(e.target.value);\n  }\n</script>\n\n<style>\n  input {\n    border: none;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n  }\n</style>\n\n<input\n  type=\"text\"\n  value={inputValue}\n  on:input={handleInput}\n  on:change={handleSubmit} />\n"
  ],
  "names": [],
  "mappings": "AAKE,CAAC,eAAC,CAAC,AACD,KAAK,CAAE,MAAM,CACb,WAAW,CAAE,eAAe,CAC5B,SAAS,CAAE,GAAG,AAChB,CAAC;AC2BD,cAAc,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CACpC,qBAAqB,CAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CACvC,UAAU,CAAE,GAAG,CACf,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACxB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AACzB,CAAC,AAED,UAAU,eAAC,CAAC,AACV,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,GAAG,AACvB,CAAC;ACjDD,KAAK,eAAC,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,MAAM,AACpB,CAAC"
}